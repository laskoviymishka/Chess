@{
    ViewBag.Title = "Игра с компьютером";
}
<link href="~/Content/chess/chessboard-0.3.0.min.css" rel="stylesheet" />
<h2>Игра с компьютером</h2>
<p><a href="examples#1001">← Back to all examples.</a></p>

<p>
    Pass <code class="js string">'start'</code> as the second argument to initialize the board to the start position.
</p>

<!-- start example HTML --->
<div id="board" style="width: 400px"></div>
<!-- end example HTML --->
<script src="~/Scripts/jquery-1.8.2.min.js"></script>
<script src="~/Scripts/chess/Chess.js"></script>
<script src="~/Scripts/chess/chessboard-0.3.0.js"></script>
<script src="~/Scripts/jquery.signalR-2.0.1.min.js"></script>
<script src="@Url.Content("~/signalr/hubs")"></script>
@Scripts.Render("~/api/proxies")
<script>
    var board;
    var game;
    var simpleHub;
    var init = function () {

        game = new Chess();
        var removeGreySquares = function () {
            $('#board .square-55d63').css('background', '');
        };

        var greySquare = function (square) {
            var squareEl = $('#board .square-' + square);

            var background = '#a9a9a9';
            if (squareEl.hasClass('black-3c85d') === true) {
                background = '#696969';
            }

            squareEl.css('background', background);
        };

        var onDragStart = function (source, piece) {
            if (game.game_over() === true ||
                (game.turn() === 'w' && piece.search(/^b/) !== -1) ||
                (game.turn() === 'b' && piece.search(/^w/) !== -1)) {
                return false;
            }
        };

        var onDrop = function (source, target) {
            removeGreySquares();

            var move = game.move({
                from: source,
                to: target,
                promotion: 'q' // NOTE: always promote to a pawn for example simplicity
            });
            alert(source + '  ' + target);
            if (move === null) return 'snapback';
            var moveModel = {
                From: source,
                To: target,
                Color: 'w'
            }
            $.proxies.chessapi.move(moveModel);
        };

        var onMouseoverSquare = function (square, piece) {
            var moves = game.moves({
                square: square,
                verbose: true
            });

            if (moves.length === 0) return;

            greySquare(square);

            for (var i = 0; i < moves.length; i++) {
                greySquare(moves[i].to);
            }
        };

        var onMouseoutSquare = function (square, piece) {
            removeGreySquares();
        };

        var onSnapEnd = function () {
            board.position(game.fen());
        };

        var cfg = {
            draggable: true,
            position: 'start',
            onDragStart: onDragStart,
            onDrop: onDrop,
            onMouseoutSquare: onMouseoutSquare,
            onMouseoverSquare: onMouseoverSquare,
            onSnapEnd: onSnapEnd
        };
        board = new ChessBoard('board', cfg);

        simpleHub = $.connection.chessHub;

        $.connection.hub.start().done(function () {
            simpleHub.server.solverMove().done(function (data) {
                alert(data.From + "  " + data.To);
                game.move({
                    from: data.From,
                    to: data.To,
                    promotion: 'q' // NOTE: always promote to a pawn for example simplicity
                });
            });
        });
    };

    $(document).ready(init);

</script>

